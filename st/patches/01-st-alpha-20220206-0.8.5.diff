From 0118d243bd7d069dcc4d77a675d079464f8716ca Mon Sep 17 00:00:00 2001
From: mrkirby153 <mr.austinwhyte@gmail.com>
Date: Sun, 2 Jul 2023 12:40:47 -0700
Subject: [PATCH] alpha: Add alpha

https://st.suckless.org/patches/alpha/
---
 config.def.h |    3 +
 config.mk    |    2 +-
 st.h         |    1 +
 x.c          | 1012 ++++++++++++++++++++++++++++----------------------
 4 files changed, 569 insertions(+), 449 deletions(-)

diff --git a/config.def.h b/config.def.h
index 2cd740a..019a4e1 100644
--- a/config.def.h
+++ b/config.def.h
@@ -93,6 +93,9 @@ char *termname = "st-256color";
  */
 unsigned int tabspaces = 8;
 
+/* bg opacity */
+float alpha = 0.8;
+
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
 	/* 8 normal colors */
diff --git a/config.mk b/config.mk
index fdc29a7..069a6c2 100644
--- a/config.mk
+++ b/config.mk
@@ -16,7 +16,7 @@ PKG_CONFIG = pkg-config
 INCS = -I$(X11INC) \
        `$(PKG_CONFIG) --cflags fontconfig` \
        `$(PKG_CONFIG) --cflags freetype2`
-LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
+LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft -lXrender\
        `$(PKG_CONFIG) --libs fontconfig` \
        `$(PKG_CONFIG) --libs freetype2`
 
diff --git a/st.h b/st.h
index fd3b0d8..9f91e2a 100644
--- a/st.h
+++ b/st.h
@@ -124,3 +124,4 @@ extern unsigned int tabspaces;
 extern unsigned int defaultfg;
 extern unsigned int defaultbg;
 extern unsigned int defaultcs;
+extern float alpha;
diff --git a/x.c b/x.c
index d73152b..0774357 100644
--- a/x.c
+++ b/x.c
@@ -21,34 +21,37 @@ char *argv0;
 #include "win.h"
 
 /* types used in config.h */
-typedef struct {
+typedef struct
+{
 	uint mod;
 	KeySym keysym;
 	void (*func)(const Arg *);
 	const Arg arg;
 } Shortcut;
 
-typedef struct {
+typedef struct
+{
 	uint mod;
 	uint button;
 	void (*func)(const Arg *);
 	const Arg arg;
-	uint  release;
+	uint release;
 } MouseShortcut;
 
-typedef struct {
+typedef struct
+{
 	KeySym k;
 	uint mask;
 	char *s;
 	/* three-valued logic variables: 0 indifferent, 1 on, -1 off */
-	signed char appkey;    /* application keypad */
+	signed char appkey;	   /* application keypad */
 	signed char appcursor; /* application cursor */
 } Key;
 
 /* X modifiers */
-#define XK_ANY_MOD    UINT_MAX
-#define XK_NO_MOD     0
-#define XK_SWITCH_MOD (1<<13|1<<14)
+#define XK_ANY_MOD UINT_MAX
+#define XK_NO_MOD 0
+#define XK_SWITCH_MOD (1 << 13 | 1 << 14)
 
 /* function definitions used in config.h */
 static void clipcopy(const Arg *);
@@ -64,37 +67,40 @@ static void ttysend(const Arg *);
 #include "config.h"
 
 /* XEMBED messages */
-#define XEMBED_FOCUS_IN  4
+#define XEMBED_FOCUS_IN 4
 #define XEMBED_FOCUS_OUT 5
 
 /* macros */
-#define IS_SET(flag)		((win.mode & (flag)) != 0)
-#define TRUERED(x)		(((x) & 0xff0000) >> 8)
-#define TRUEGREEN(x)		(((x) & 0xff00))
-#define TRUEBLUE(x)		(((x) & 0xff) << 8)
+#define IS_SET(flag) ((win.mode & (flag)) != 0)
+#define TRUERED(x) (((x) & 0xff0000) >> 8)
+#define TRUEGREEN(x) (((x) & 0xff00))
+#define TRUEBLUE(x) (((x) & 0xff) << 8)
 
 typedef XftDraw *Draw;
 typedef XftColor Color;
 typedef XftGlyphFontSpec GlyphFontSpec;
 
 /* Purely graphic info */
-typedef struct {
+typedef struct
+{
 	int tw, th; /* tty width and height */
-	int w, h; /* window width and height */
-	int ch; /* char height */
-	int cw; /* char width  */
-	int mode; /* window state/mode flags */
+	int w, h;	/* window width and height */
+	int ch;		/* char height */
+	int cw;		/* char width  */
+	int mode;	/* window state/mode flags */
 	int cursor; /* cursor style */
 } TermWindow;
 
-typedef struct {
+typedef struct
+{
 	Display *dpy;
 	Colormap cmap;
 	Window win;
 	Drawable buf;
 	GlyphFontSpec *specbuf; /* font spec buffer used for rendering */
 	Atom xembed, wmdeletewin, netwmname, netwmiconname, netwmpid;
-	struct {
+	struct
+	{
 		XIM xim;
 		XIC xic;
 		XPoint spot;
@@ -105,11 +111,13 @@ typedef struct {
 	XSetWindowAttributes attrs;
 	int scr;
 	int isfixed; /* is fixed geometry? */
-	int l, t; /* left and top offset */
-	int gm; /* geometry mask */
+	int depth;	 /* bit depth */
+	int l, t;	 /* left and top offset */
+	int gm;		 /* geometry mask */
 } XWindow;
 
-typedef struct {
+typedef struct
+{
 	Atom xtarget;
 	char *primary, *clipboard;
 	struct timespec tclick1;
@@ -118,7 +126,8 @@ typedef struct {
 
 /* Font structure */
 #define Font Font_
-typedef struct {
+typedef struct
+{
 	int height;
 	int width;
 	int ascent;
@@ -133,7 +142,8 @@ typedef struct {
 } Font;
 
 /* Drawing Context */
-typedef struct {
+typedef struct
+{
 	Color *col;
 	size_t collen;
 	Font font, bfont, ifont, ibfont;
@@ -201,16 +211,16 @@ static void (*handler[LASTEvent])(XEvent *) = {
 	[MotionNotify] = bmotion,
 	[ButtonPress] = bpress,
 	[ButtonRelease] = brelease,
-/*
- * Uncomment if you want the selection to disappear when you select something
- * different in another window.
- */
-/*	[SelectionClear] = selclear_, */
+	/*
+	 * Uncomment if you want the selection to disappear when you select something
+	 * different in another window.
+	 */
+	/*	[SelectionClear] = selclear_, */
 	[SelectionNotify] = selnotify,
-/*
- * PropertyNotify is only turned on when there is some INCR transfer happening
- * for the selection retrieval.
- */
+	/*
+	 * PropertyNotify is only turned on when there is some INCR transfer happening
+	 * for the selection retrieval.
+	 */
 	[PropertyNotify] = propnotify,
 	[SelectionRequest] = selrequest,
 };
@@ -222,14 +232,16 @@ static XSelection xsel;
 static TermWindow win;
 
 /* Font Ring Cache */
-enum {
+enum
+{
 	FRC_NORMAL,
 	FRC_ITALIC,
 	FRC_BOLD,
 	FRC_ITALICBOLD
 };
 
-typedef struct {
+typedef struct
+{
 	XftFont *font;
 	int flags;
 	Rune unicodep;
@@ -243,57 +255,54 @@ static char *usedfont = NULL;
 static double usedfontsize = 0;
 static double defaultfontsize = 0;
 
+static char *opt_alpha = NULL;
 static char *opt_class = NULL;
-static char **opt_cmd  = NULL;
+static char **opt_cmd = NULL;
 static char *opt_embed = NULL;
-static char *opt_font  = NULL;
-static char *opt_io    = NULL;
-static char *opt_line  = NULL;
-static char *opt_name  = NULL;
+static char *opt_font = NULL;
+static char *opt_io = NULL;
+static char *opt_line = NULL;
+static char *opt_name = NULL;
 static char *opt_title = NULL;
 
 static uint buttons; /* bit field of pressed buttons */
 
-void
-clipcopy(const Arg *dummy)
+void clipcopy(const Arg *dummy)
 {
 	Atom clipboard;
 
 	free(xsel.clipboard);
 	xsel.clipboard = NULL;
 
-	if (xsel.primary != NULL) {
+	if (xsel.primary != NULL)
+	{
 		xsel.clipboard = xstrdup(xsel.primary);
 		clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
 		XSetSelectionOwner(xw.dpy, clipboard, xw.win, CurrentTime);
 	}
 }
 
-void
-clippaste(const Arg *dummy)
+void clippaste(const Arg *dummy)
 {
 	Atom clipboard;
 
 	clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
 	XConvertSelection(xw.dpy, clipboard, xsel.xtarget, clipboard,
-			xw.win, CurrentTime);
+					  xw.win, CurrentTime);
 }
 
-void
-selpaste(const Arg *dummy)
+void selpaste(const Arg *dummy)
 {
 	XConvertSelection(xw.dpy, XA_PRIMARY, xsel.xtarget, XA_PRIMARY,
-			xw.win, CurrentTime);
+					  xw.win, CurrentTime);
 }
 
-void
-numlock(const Arg *dummy)
+void numlock(const Arg *dummy)
 {
 	win.mode ^= MODE_NUMLOCK;
 }
 
-void
-zoom(const Arg *arg)
+void zoom(const Arg *arg)
 {
 	Arg larg;
 
@@ -301,8 +310,7 @@ zoom(const Arg *arg)
 	zoomabs(&larg);
 }
 
-void
-zoomabs(const Arg *arg)
+void zoomabs(const Arg *arg)
 {
 	xunloadfonts();
 	xloadfonts(usedfont, arg->f);
@@ -311,47 +319,45 @@ zoomabs(const Arg *arg)
 	xhints();
 }
 
-void
-zoomreset(const Arg *arg)
+void zoomreset(const Arg *arg)
 {
 	Arg larg;
 
-	if (defaultfontsize > 0) {
+	if (defaultfontsize > 0)
+	{
 		larg.f = defaultfontsize;
 		zoomabs(&larg);
 	}
 }
 
-void
-ttysend(const Arg *arg)
+void ttysend(const Arg *arg)
 {
 	ttywrite(arg->s, strlen(arg->s), 1);
 }
 
-int
-evcol(XEvent *e)
+int evcol(XEvent *e)
 {
 	int x = e->xbutton.x - borderpx;
 	LIMIT(x, 0, win.tw - 1);
 	return x / win.cw;
 }
 
-int
-evrow(XEvent *e)
+int evrow(XEvent *e)
 {
 	int y = e->xbutton.y - borderpx;
 	LIMIT(y, 0, win.th - 1);
 	return y / win.ch;
 }
 
-void
-mousesel(XEvent *e, int done)
+void mousesel(XEvent *e, int done)
 {
 	int type, seltype = SEL_REGULAR;
 	uint state = e->xbutton.state & ~(Button1Mask | forcemousemod);
 
-	for (type = 1; type < LEN(selmasks); ++type) {
-		if (match(selmasks[type], state)) {
+	for (type = 1; type < LEN(selmasks); ++type)
+	{
+		if (match(selmasks[type], state))
+		{
 			seltype = type;
 			break;
 		}
@@ -361,8 +367,7 @@ mousesel(XEvent *e, int done)
 		setsel(getsel(), e->xbutton.time);
 }
 
-void
-mousereport(XEvent *e)
+void mousereport(XEvent *e)
 {
 	int len, btn, code;
 	int x = evcol(e), y = evrow(e);
@@ -370,7 +375,8 @@ mousereport(XEvent *e)
 	char buf[40];
 	static int ox, oy;
 
-	if (e->type == MotionNotify) {
+	if (e->type == MotionNotify)
+	{
 		if (x == ox && y == oy)
 			return;
 		if (!IS_SET(MODE_MOUSEMOTION) && !IS_SET(MODE_MOUSEMANY))
@@ -380,15 +386,18 @@ mousereport(XEvent *e)
 			return;
 		/* Set btn to lowest-numbered pressed button, or 12 if no
 		 * buttons are pressed. */
-		for (btn = 1; btn <= 11 && !(buttons & (1<<(btn-1))); btn++)
+		for (btn = 1; btn <= 11 && !(buttons & (1 << (btn - 1))); btn++)
 			;
 		code = 32;
-	} else {
+	}
+	else
+	{
 		btn = e->xbutton.button;
 		/* Only buttons 1 through 11 can be encoded */
 		if (btn < 1 || btn > 11)
 			return;
-		if (e->type == ButtonRelease) {
+		if (e->type == ButtonRelease)
+		{
 			/* MODE_MOUSEX10: no button release reporting */
 			if (IS_SET(MODE_MOUSEX10))
 				return;
@@ -413,50 +422,55 @@ mousereport(XEvent *e)
 	else
 		code += btn - 1;
 
-	if (!IS_SET(MODE_MOUSEX10)) {
-		code += ((state & ShiftMask  ) ?  4 : 0)
-		      + ((state & Mod1Mask   ) ?  8 : 0) /* meta key: alt */
-		      + ((state & ControlMask) ? 16 : 0);
+	if (!IS_SET(MODE_MOUSEX10))
+	{
+		code += ((state & ShiftMask) ? 4 : 0) + ((state & Mod1Mask) ? 8 : 0) /* meta key: alt */
+				+ ((state & ControlMask) ? 16 : 0);
 	}
 
-	if (IS_SET(MODE_MOUSESGR)) {
+	if (IS_SET(MODE_MOUSESGR))
+	{
 		len = snprintf(buf, sizeof(buf), "\033[<%d;%d;%d%c",
-				code, x+1, y+1,
-				e->type == ButtonRelease ? 'm' : 'M');
-	} else if (x < 223 && y < 223) {
+					   code, x + 1, y + 1,
+					   e->type == ButtonRelease ? 'm' : 'M');
+	}
+	else if (x < 223 && y < 223)
+	{
 		len = snprintf(buf, sizeof(buf), "\033[M%c%c%c",
-				32+code, 32+x+1, 32+y+1);
-	} else {
+					   32 + code, 32 + x + 1, 32 + y + 1);
+	}
+	else
+	{
 		return;
 	}
 
 	ttywrite(buf, len, 0);
 }
 
-uint
-buttonmask(uint button)
+uint buttonmask(uint button)
 {
-	return button == Button1 ? Button1Mask
-	     : button == Button2 ? Button2Mask
-	     : button == Button3 ? Button3Mask
-	     : button == Button4 ? Button4Mask
-	     : button == Button5 ? Button5Mask
-	     : 0;
+	return button == Button1   ? Button1Mask
+		   : button == Button2 ? Button2Mask
+		   : button == Button3 ? Button3Mask
+		   : button == Button4 ? Button4Mask
+		   : button == Button5 ? Button5Mask
+							   : 0;
 }
 
-int
-mouseaction(XEvent *e, uint release)
+int mouseaction(XEvent *e, uint release)
 {
 	MouseShortcut *ms;
 
 	/* ignore Button<N>mask for Button<N> - it's set on release */
 	uint state = e->xbutton.state & ~buttonmask(e->xbutton.button);
 
-	for (ms = mshortcuts; ms < mshortcuts + LEN(mshortcuts); ms++) {
+	for (ms = mshortcuts; ms < mshortcuts + LEN(mshortcuts); ms++)
+	{
 		if (ms->release == release &&
-		    ms->button == e->xbutton.button &&
-		    (match(ms->mod, state) ||  /* exact or forced */
-		     match(ms->mod, state & ~forcemousemod))) {
+			ms->button == e->xbutton.button &&
+			(match(ms->mod, state) || /* exact or forced */
+			 match(ms->mod, state & ~forcemousemod)))
+		{
 			ms->func(&(ms->arg));
 			return 1;
 		}
@@ -465,17 +479,17 @@ mouseaction(XEvent *e, uint release)
 	return 0;
 }
 
-void
-bpress(XEvent *e)
+void bpress(XEvent *e)
 {
 	int btn = e->xbutton.button;
 	struct timespec now;
 	int snap;
 
 	if (1 <= btn && btn <= 11)
-		buttons |= 1 << (btn-1);
+		buttons |= 1 << (btn - 1);
 
-	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forcemousemod)) {
+	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forcemousemod))
+	{
 		mousereport(e);
 		return;
 	}
@@ -483,17 +497,23 @@ bpress(XEvent *e)
 	if (mouseaction(e, 0))
 		return;
 
-	if (btn == Button1) {
+	if (btn == Button1)
+	{
 		/*
 		 * If the user clicks below predefined timeouts specific
 		 * snapping behaviour is exposed.
 		 */
 		clock_gettime(CLOCK_MONOTONIC, &now);
-		if (TIMEDIFF(now, xsel.tclick2) <= tripleclicktimeout) {
+		if (TIMEDIFF(now, xsel.tclick2) <= tripleclicktimeout)
+		{
 			snap = SNAP_LINE;
-		} else if (TIMEDIFF(now, xsel.tclick1) <= doubleclicktimeout) {
+		}
+		else if (TIMEDIFF(now, xsel.tclick1) <= doubleclicktimeout)
+		{
 			snap = SNAP_WORD;
-		} else {
+		}
+		else
+		{
 			snap = 0;
 		}
 		xsel.tclick2 = xsel.tclick1;
@@ -503,22 +523,21 @@ bpress(XEvent *e)
 	}
 }
 
-void
-propnotify(XEvent *e)
+void propnotify(XEvent *e)
 {
 	XPropertyEvent *xpev;
 	Atom clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
 
 	xpev = &e->xproperty;
 	if (xpev->state == PropertyNewValue &&
-			(xpev->atom == XA_PRIMARY ||
-			 xpev->atom == clipboard)) {
+		(xpev->atom == XA_PRIMARY ||
+		 xpev->atom == clipboard))
+	{
 		selnotify(e);
 	}
 }
 
-void
-selnotify(XEvent *e)
+void selnotify(XEvent *e)
 {
 	ulong nitems, ofs, rem;
 	int format;
@@ -536,16 +555,19 @@ selnotify(XEvent *e)
 	if (property == None)
 		return;
 
-	do {
+	do
+	{
 		if (XGetWindowProperty(xw.dpy, xw.win, property, ofs,
-					BUFSIZ/4, False, AnyPropertyType,
-					&type, &format, &nitems, &rem,
-					&data)) {
+							   BUFSIZ / 4, False, AnyPropertyType,
+							   &type, &format, &nitems, &rem,
+							   &data))
+		{
 			fprintf(stderr, "Clipboard allocation failed\n");
 			return;
 		}
 
-		if (e->type == PropertyNotify && nitems == 0 && rem == 0) {
+		if (e->type == PropertyNotify && nitems == 0 && rem == 0)
+		{
 			/*
 			 * If there is some PropertyNotify with no data, then
 			 * this is the signal of the selection owner that all
@@ -554,10 +576,11 @@ selnotify(XEvent *e)
 			 */
 			MODBIT(xw.attrs.event_mask, 0, PropertyChangeMask);
 			XChangeWindowAttributes(xw.dpy, xw.win, CWEventMask,
-					&xw.attrs);
+									&xw.attrs);
 		}
 
-		if (type == incratom) {
+		if (type == incratom)
+		{
 			/*
 			 * Activate the PropertyNotify events so we receive
 			 * when the selection owner does send us the next
@@ -565,7 +588,7 @@ selnotify(XEvent *e)
 			 */
 			MODBIT(xw.attrs.event_mask, 1, PropertyChangeMask);
 			XChangeWindowAttributes(xw.dpy, xw.win, CWEventMask,
-					&xw.attrs);
+									&xw.attrs);
 
 			/*
 			 * Deleting the property is the transfer start signal.
@@ -583,7 +606,8 @@ selnotify(XEvent *e)
 		 */
 		repl = data;
 		last = data + nitems * format / 8;
-		while ((repl = memchr(repl, '\n', last - repl))) {
+		while ((repl = memchr(repl, '\n', last - repl)))
+		{
 			*repl++ = '\r';
 		}
 
@@ -604,27 +628,24 @@ selnotify(XEvent *e)
 	XDeleteProperty(xw.dpy, xw.win, (int)property);
 }
 
-void
-xclipcopy(void)
+void xclipcopy(void)
 {
 	clipcopy(NULL);
 }
 
-void
-selclear_(XEvent *e)
+void selclear_(XEvent *e)
 {
 	selclear();
 }
 
-void
-selrequest(XEvent *e)
+void selrequest(XEvent *e)
 {
 	XSelectionRequestEvent *xsre;
 	XSelectionEvent xev;
 	Atom xa_targets, string, clipboard;
 	char *seltext;
 
-	xsre = (XSelectionRequestEvent *) e;
+	xsre = (XSelectionRequestEvent *)e;
 	xev.type = SelectionNotify;
 	xev.requestor = xsre->requestor;
 	xev.selection = xsre->selection;
@@ -637,45 +658,53 @@ selrequest(XEvent *e)
 	xev.property = None;
 
 	xa_targets = XInternAtom(xw.dpy, "TARGETS", 0);
-	if (xsre->target == xa_targets) {
+	if (xsre->target == xa_targets)
+	{
 		/* respond with the supported type */
 		string = xsel.xtarget;
 		XChangeProperty(xsre->display, xsre->requestor, xsre->property,
-				XA_ATOM, 32, PropModeReplace,
-				(uchar *) &string, 1);
+						XA_ATOM, 32, PropModeReplace,
+						(uchar *)&string, 1);
 		xev.property = xsre->property;
-	} else if (xsre->target == xsel.xtarget || xsre->target == XA_STRING) {
+	}
+	else if (xsre->target == xsel.xtarget || xsre->target == XA_STRING)
+	{
 		/*
 		 * xith XA_STRING non ascii characters may be incorrect in the
 		 * requestor. It is not our problem, use utf8.
 		 */
 		clipboard = XInternAtom(xw.dpy, "CLIPBOARD", 0);
-		if (xsre->selection == XA_PRIMARY) {
+		if (xsre->selection == XA_PRIMARY)
+		{
 			seltext = xsel.primary;
-		} else if (xsre->selection == clipboard) {
+		}
+		else if (xsre->selection == clipboard)
+		{
 			seltext = xsel.clipboard;
-		} else {
+		}
+		else
+		{
 			fprintf(stderr,
-				"Unhandled clipboard selection 0x%lx\n",
-				xsre->selection);
+					"Unhandled clipboard selection 0x%lx\n",
+					xsre->selection);
 			return;
 		}
-		if (seltext != NULL) {
+		if (seltext != NULL)
+		{
 			XChangeProperty(xsre->display, xsre->requestor,
-					xsre->property, xsre->target,
-					8, PropModeReplace,
-					(uchar *)seltext, strlen(seltext));
+							xsre->property, xsre->target,
+							8, PropModeReplace,
+							(uchar *)seltext, strlen(seltext));
 			xev.property = xsre->property;
 		}
 	}
 
 	/* all done, send a notification to the listener */
-	if (!XSendEvent(xsre->display, xsre->requestor, 1, 0, (XEvent *) &xev))
+	if (!XSendEvent(xsre->display, xsre->requestor, 1, 0, (XEvent *)&xev))
 		fprintf(stderr, "Error sending SelectionNotify event\n");
 }
 
-void
-setsel(char *str, Time t)
+void setsel(char *str, Time t)
 {
 	if (!str)
 		return;
@@ -688,21 +717,20 @@ setsel(char *str, Time t)
 		selclear();
 }
 
-void
-xsetsel(char *str)
+void xsetsel(char *str)
 {
 	setsel(str, CurrentTime);
 }
 
-void
-brelease(XEvent *e)
+void brelease(XEvent *e)
 {
 	int btn = e->xbutton.button;
 
 	if (1 <= btn && btn <= 11)
-		buttons &= ~(1 << (btn-1));
+		buttons &= ~(1 << (btn - 1));
 
-	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forcemousemod)) {
+	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forcemousemod))
+	{
 		mousereport(e);
 		return;
 	}
@@ -713,10 +741,10 @@ brelease(XEvent *e)
 		mousesel(e, 1);
 }
 
-void
-bmotion(XEvent *e)
+void bmotion(XEvent *e)
 {
-	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forcemousemod)) {
+	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forcemousemod))
+	{
 		mousereport(e);
 		return;
 	}
@@ -724,8 +752,7 @@ bmotion(XEvent *e)
 	mousesel(e, 0);
 }
 
-void
-cresize(int width, int height)
+void cresize(int width, int height)
 {
 	int col, row;
 
@@ -744,15 +771,14 @@ cresize(int width, int height)
 	ttyresize(win.tw, win.th);
 }
 
-void
-xresize(int col, int row)
+void xresize(int col, int row)
 {
 	win.tw = col * win.cw;
 	win.th = row * win.ch;
 
 	XFreePixmap(xw.dpy, xw.buf);
 	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-			DefaultDepth(xw.dpy, xw.scr));
+						   xw.depth);
 	XftDrawChange(xw.draw, xw.buf);
 	xclear(0, 0, win.w, win.h);
 
@@ -766,57 +792,71 @@ sixd_to_16bit(int x)
 	return x == 0 ? 0 : 0x3737 + 0x2828 * x;
 }
 
-int
-xloadcolor(int i, const char *name, Color *ncolor)
+int xloadcolor(int i, const char *name, Color *ncolor)
 {
-	XRenderColor color = { .alpha = 0xffff };
+	XRenderColor color = {.alpha = 0xffff};
 
-	if (!name) {
-		if (BETWEEN(i, 16, 255)) { /* 256 color */
-			if (i < 6*6*6+16) { /* same colors as xterm */
-				color.red   = sixd_to_16bit( ((i-16)/36)%6 );
-				color.green = sixd_to_16bit( ((i-16)/6) %6 );
-				color.blue  = sixd_to_16bit( ((i-16)/1) %6 );
-			} else { /* greyscale */
-				color.red = 0x0808 + 0x0a0a * (i - (6*6*6+16));
+	if (!name)
+	{
+		if (BETWEEN(i, 16, 255))
+		{ /* 256 color */
+			if (i < 6 * 6 * 6 + 16)
+			{ /* same colors as xterm */
+				color.red = sixd_to_16bit(((i - 16) / 36) % 6);
+				color.green = sixd_to_16bit(((i - 16) / 6) % 6);
+				color.blue = sixd_to_16bit(((i - 16) / 1) % 6);
+			}
+			else
+			{ /* greyscale */
+				color.red = 0x0808 + 0x0a0a * (i - (6 * 6 * 6 + 16));
 				color.green = color.blue = color.red;
 			}
 			return XftColorAllocValue(xw.dpy, xw.vis,
-			                          xw.cmap, &color, ncolor);
-		} else
+									  xw.cmap, &color, ncolor);
+		}
+		else
 			name = colorname[i];
 	}
 
 	return XftColorAllocName(xw.dpy, xw.vis, xw.cmap, name, ncolor);
 }
 
-void
-xloadcols(void)
+void xloadcols(void)
 {
 	int i;
 	static int loaded;
 	Color *cp;
 
-	if (loaded) {
+	if (loaded)
+	{
 		for (cp = dc.col; cp < &dc.col[dc.collen]; ++cp)
 			XftColorFree(xw.dpy, xw.vis, xw.cmap, cp);
-	} else {
+	}
+	else
+	{
 		dc.collen = MAX(LEN(colorname), 256);
 		dc.col = xmalloc(dc.collen * sizeof(Color));
 	}
 
 	for (i = 0; i < dc.collen; i++)
-		if (!xloadcolor(i, NULL, &dc.col[i])) {
+		if (!xloadcolor(i, NULL, &dc.col[i]))
+		{
 			if (colorname[i])
 				die("could not allocate color '%s'\n", colorname[i]);
 			else
 				die("could not allocate color %d\n", i);
 		}
+
+	/* set alpha value of bg color */
+	if (opt_alpha)
+		alpha = strtof(opt_alpha, NULL);
+	dc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);
+	dc.col[defaultbg].pixel &= 0x00FFFFFF;
+	dc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;
 	loaded = 1;
 }
 
-int
-xgetcolor(int x, unsigned char *r, unsigned char *g, unsigned char *b)
+int xgetcolor(int x, unsigned char *r, unsigned char *g, unsigned char *b)
 {
 	if (!BETWEEN(x, 0, dc.collen - 1))
 		return 1;
@@ -828,8 +868,7 @@ xgetcolor(int x, unsigned char *r, unsigned char *g, unsigned char *b)
 	return 0;
 }
 
-int
-xsetcolorname(int x, const char *name)
+int xsetcolorname(int x, const char *name)
 {
 	Color ncolor;
 
@@ -848,19 +887,17 @@ xsetcolorname(int x, const char *name)
 /*
  * Absolute coordinates.
  */
-void
-xclear(int x1, int y1, int x2, int y2)
+void xclear(int x1, int y1, int x2, int y2)
 {
 	XftDrawRect(xw.draw,
-			&dc.col[IS_SET(MODE_REVERSE)? defaultfg : defaultbg],
-			x1, y1, x2-x1, y2-y1);
+				&dc.col[IS_SET(MODE_REVERSE) ? defaultfg : defaultbg],
+				x1, y1, x2 - x1, y2 - y1);
 }
 
-void
-xhints(void)
+void xhints(void)
 {
 	XClassHint class = {opt_name ? opt_name : termname,
-	                    opt_class ? opt_class : termname};
+						opt_class ? opt_class : termname};
 	XWMHints wm = {.flags = InputHint, .input = 1};
 	XSizeHints *sizeh;
 
@@ -875,12 +912,14 @@ xhints(void)
 	sizeh->base_width = 2 * borderpx;
 	sizeh->min_height = win.ch + 2 * borderpx;
 	sizeh->min_width = win.cw + 2 * borderpx;
-	if (xw.isfixed) {
+	if (xw.isfixed)
+	{
 		sizeh->flags |= PMaxSize;
 		sizeh->min_width = sizeh->max_width = win.w;
 		sizeh->min_height = sizeh->max_height = win.h;
 	}
-	if (xw.gm & (XValue|YValue)) {
+	if (xw.gm & (XValue | YValue))
+	{
 		sizeh->flags |= USPosition | PWinGravity;
 		sizeh->x = xw.l;
 		sizeh->y = xw.t;
@@ -888,14 +927,14 @@ xhints(void)
 	}
 
 	XSetWMProperties(xw.dpy, xw.win, NULL, NULL, NULL, 0, sizeh, &wm,
-			&class);
+					 &class);
 	XFree(sizeh);
 }
 
-int
-xgeommasktogravity(int mask)
+int xgeommasktogravity(int mask)
 {
-	switch (mask & (XNegative|YNegative)) {
+	switch (mask & (XNegative | YNegative))
+	{
 	case 0:
 		return NorthWestGravity;
 	case XNegative:
@@ -907,8 +946,7 @@ xgeommasktogravity(int mask)
 	return SouthEastGravity;
 }
 
-int
-xloadfont(Font *f, FcPattern *pattern)
+int xloadfont(Font *f, FcPattern *pattern)
 {
 	FcPattern *configured;
 	FcPattern *match;
@@ -929,42 +967,50 @@ xloadfont(Font *f, FcPattern *pattern)
 	XftDefaultSubstitute(xw.dpy, xw.scr, configured);
 
 	match = FcFontMatch(NULL, configured, &result);
-	if (!match) {
+	if (!match)
+	{
 		FcPatternDestroy(configured);
 		return 1;
 	}
 
-	if (!(f->match = XftFontOpenPattern(xw.dpy, match))) {
+	if (!(f->match = XftFontOpenPattern(xw.dpy, match)))
+	{
 		FcPatternDestroy(configured);
 		FcPatternDestroy(match);
 		return 1;
 	}
 
 	if ((XftPatternGetInteger(pattern, "slant", 0, &wantattr) ==
-	    XftResultMatch)) {
+		 XftResultMatch))
+	{
 		/*
 		 * Check if xft was unable to find a font with the appropriate
 		 * slant but gave us one anyway. Try to mitigate.
 		 */
 		if ((XftPatternGetInteger(f->match->pattern, "slant", 0,
-		    &haveattr) != XftResultMatch) || haveattr < wantattr) {
+								  &haveattr) != XftResultMatch) ||
+			haveattr < wantattr)
+		{
 			f->badslant = 1;
 			fputs("font slant does not match\n", stderr);
 		}
 	}
 
 	if ((XftPatternGetInteger(pattern, "weight", 0, &wantattr) ==
-	    XftResultMatch)) {
+		 XftResultMatch))
+	{
 		if ((XftPatternGetInteger(f->match->pattern, "weight", 0,
-		    &haveattr) != XftResultMatch) || haveattr != wantattr) {
+								  &haveattr) != XftResultMatch) ||
+			haveattr != wantattr)
+		{
 			f->badweight = 1;
 			fputs("font weight does not match\n", stderr);
 		}
 	}
 
 	XftTextExtentsUtf8(xw.dpy, f->match,
-		(const FcChar8 *) ascii_printable,
-		strlen(ascii_printable), &extents);
+					   (const FcChar8 *)ascii_printable,
+					   strlen(ascii_printable), &extents);
 
 	f->set = NULL;
 	f->pattern = configured;
@@ -980,8 +1026,7 @@ xloadfont(Font *f, FcPattern *pattern)
 	return 0;
 }
 
-void
-xloadfonts(const char *fontstr, double fontsize)
+void xloadfonts(const char *fontstr, double fontsize)
 {
 	FcPattern *pattern;
 	double fontval;
@@ -994,19 +1039,27 @@ xloadfonts(const char *fontstr, double fontsize)
 	if (!pattern)
 		die("can't open font %s\n", fontstr);
 
-	if (fontsize > 1) {
+	if (fontsize > 1)
+	{
 		FcPatternDel(pattern, FC_PIXEL_SIZE);
 		FcPatternDel(pattern, FC_SIZE);
 		FcPatternAddDouble(pattern, FC_PIXEL_SIZE, (double)fontsize);
 		usedfontsize = fontsize;
-	} else {
+	}
+	else
+	{
 		if (FcPatternGetDouble(pattern, FC_PIXEL_SIZE, 0, &fontval) ==
-				FcResultMatch) {
+			FcResultMatch)
+		{
 			usedfontsize = fontval;
-		} else if (FcPatternGetDouble(pattern, FC_SIZE, 0, &fontval) ==
-				FcResultMatch) {
+		}
+		else if (FcPatternGetDouble(pattern, FC_SIZE, 0, &fontval) ==
+				 FcResultMatch)
+		{
 			usedfontsize = -1;
-		} else {
+		}
+		else
+		{
 			/*
 			 * Default font size is 12, if none given. This is to
 			 * have a known usedfontsize value.
@@ -1020,9 +1073,10 @@ xloadfonts(const char *fontstr, double fontsize)
 	if (xloadfont(&dc.font, pattern))
 		die("can't open font %s\n", fontstr);
 
-	if (usedfontsize < 0) {
+	if (usedfontsize < 0)
+	{
 		FcPatternGetDouble(dc.font.match->pattern,
-		                   FC_PIXEL_SIZE, 0, &fontval);
+						   FC_PIXEL_SIZE, 0, &fontval);
 		usedfontsize = fontval;
 		if (fontsize == 0)
 			defaultfontsize = fontval;
@@ -1050,8 +1104,7 @@ xloadfonts(const char *fontstr, double fontsize)
 	FcPatternDestroy(pattern);
 }
 
-void
-xunloadfont(Font *f)
+void xunloadfont(Font *f)
 {
 	XftFontClose(xw.dpy, f->match);
 	FcPatternDestroy(f->pattern);
@@ -1059,8 +1112,7 @@ xunloadfont(Font *f)
 		FcFontSetDestroy(f->set);
 }
 
-void
-xunloadfonts(void)
+void xunloadfonts(void)
 {
 	/* Free the loaded fonts in the font cache.  */
 	while (frclen > 0)
@@ -1072,11 +1124,10 @@ xunloadfonts(void)
 	xunloadfont(&dc.ibfont);
 }
 
-int
-ximopen(Display *dpy)
+int ximopen(Display *dpy)
 {
-	XIMCallback imdestroy = { .client_data = NULL, .callback = ximdestroy };
-	XICCallback icdestroy = { .client_data = NULL, .callback = xicdestroy };
+	XIMCallback imdestroy = {.client_data = NULL, .callback = ximdestroy};
+	XICCallback icdestroy = {.client_data = NULL, .callback = xicdestroy};
 
 	xw.ime.xim = XOpenIM(xw.dpy, NULL, NULL, NULL);
 	if (xw.ime.xim == NULL)
@@ -1084,17 +1135,18 @@ ximopen(Display *dpy)
 
 	if (XSetIMValues(xw.ime.xim, XNDestroyCallback, &imdestroy, NULL))
 		fprintf(stderr, "XSetIMValues: "
-		                "Could not set XNDestroyCallback.\n");
+						"Could not set XNDestroyCallback.\n");
 
 	xw.ime.spotlist = XVaCreateNestedList(0, XNSpotLocation, &xw.ime.spot,
-	                                      NULL);
+										  NULL);
 
-	if (xw.ime.xic == NULL) {
+	if (xw.ime.xic == NULL)
+	{
 		xw.ime.xic = XCreateIC(xw.ime.xim, XNInputStyle,
-		                       XIMPreeditNothing | XIMStatusNothing,
-		                       XNClientWindow, xw.win,
-		                       XNDestroyCallback, &icdestroy,
-		                       NULL);
+							   XIMPreeditNothing | XIMStatusNothing,
+							   XNClientWindow, xw.win,
+							   XNDestroyCallback, &icdestroy,
+							   NULL);
 	}
 	if (xw.ime.xic == NULL)
 		fprintf(stderr, "XCreateIC: Could not create input context.\n");
@@ -1102,53 +1154,64 @@ ximopen(Display *dpy)
 	return 1;
 }
 
-void
-ximinstantiate(Display *dpy, XPointer client, XPointer call)
+void ximinstantiate(Display *dpy, XPointer client, XPointer call)
 {
 	if (ximopen(dpy))
 		XUnregisterIMInstantiateCallback(xw.dpy, NULL, NULL, NULL,
-		                                 ximinstantiate, NULL);
+										 ximinstantiate, NULL);
 }
 
-void
-ximdestroy(XIM xim, XPointer client, XPointer call)
+void ximdestroy(XIM xim, XPointer client, XPointer call)
 {
 	xw.ime.xim = NULL;
 	XRegisterIMInstantiateCallback(xw.dpy, NULL, NULL, NULL,
-	                               ximinstantiate, NULL);
+								   ximinstantiate, NULL);
 	XFree(xw.ime.spotlist);
 }
 
-int
-xicdestroy(XIC xim, XPointer client, XPointer call)
+int xicdestroy(XIC xim, XPointer client, XPointer call)
 {
 	xw.ime.xic = NULL;
 	return 1;
 }
 
-void
-xinit(int cols, int rows)
+void xinit(int cols, int rows)
 {
 	XGCValues gcvalues;
 	Cursor cursor;
 	Window parent, root;
 	pid_t thispid = getpid();
 	XColor xmousefg, xmousebg;
+	XWindowAttributes attr;
+	XVisualInfo vis;
 
 	if (!(xw.dpy = XOpenDisplay(NULL)))
 		die("can't open display\n");
 	xw.scr = XDefaultScreen(xw.dpy);
-	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+
+	if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
+	{
+		parent = XRootWindow(xw.dpy, xw.scr);
+		xw.depth = 32;
+	}
+	else
+	{
+		XGetWindowAttributes(xw.dpy, parent, &attr);
+		xw.depth = attr.depth;
+	}
+
+	XMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &vis);
+	xw.vis = vis.visual;
 
 	/* font */
 	if (!FcInit())
 		die("could not init fontconfig.\n");
 
-	usedfont = (opt_font == NULL)? font : opt_font;
+	usedfont = (opt_font == NULL) ? font : opt_font;
 	xloadfonts(usedfont, 0);
 
 	/* colors */
-	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+	xw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);
 	xloadcols();
 
 	/* adjust fixed window geometry */
@@ -1163,27 +1226,19 @@ xinit(int cols, int rows)
 	xw.attrs.background_pixel = dc.col[defaultbg].pixel;
 	xw.attrs.border_pixel = dc.col[defaultbg].pixel;
 	xw.attrs.bit_gravity = NorthWestGravity;
-	xw.attrs.event_mask = FocusChangeMask | KeyPressMask | KeyReleaseMask
-		| ExposureMask | VisibilityChangeMask | StructureNotifyMask
-		| ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;
+	xw.attrs.event_mask = FocusChangeMask | KeyPressMask | KeyReleaseMask | ExposureMask | VisibilityChangeMask | StructureNotifyMask | ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;
 	xw.attrs.colormap = xw.cmap;
 
-	root = XRootWindow(xw.dpy, xw.scr);
-	if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
-		parent = root;
-	xw.win = XCreateWindow(xw.dpy, root, xw.l, xw.t,
-			win.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
-			xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity
-			| CWEventMask | CWColormap, &xw.attrs);
+	xw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,
+						   win.w, win.h, 0, xw.depth, InputOutput,
+						   xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity | CWEventMask | CWColormap, &xw.attrs);
 	if (parent != root)
 		XReparentWindow(xw.dpy, xw.win, parent, xw.l, xw.t);
 
 	memset(&gcvalues, 0, sizeof(gcvalues));
 	gcvalues.graphics_exposures = False;
-	dc.gc = XCreateGC(xw.dpy, xw.win, GCGraphicsExposures,
-			&gcvalues);
-	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-			DefaultDepth(xw.dpy, xw.scr));
+	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);
+	dc.gc = XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &gcvalues);
 	XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
 	XFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);
 
@@ -1194,25 +1249,28 @@ xinit(int cols, int rows)
 	xw.draw = XftDrawCreate(xw.dpy, xw.buf, xw.vis, xw.cmap);
 
 	/* input methods */
-	if (!ximopen(xw.dpy)) {
+	if (!ximopen(xw.dpy))
+	{
 		XRegisterIMInstantiateCallback(xw.dpy, NULL, NULL, NULL,
-	                                       ximinstantiate, NULL);
+									   ximinstantiate, NULL);
 	}
 
 	/* white cursor, black outline */
 	cursor = XCreateFontCursor(xw.dpy, mouseshape);
 	XDefineCursor(xw.dpy, xw.win, cursor);
 
-	if (XParseColor(xw.dpy, xw.cmap, colorname[mousefg], &xmousefg) == 0) {
-		xmousefg.red   = 0xffff;
+	if (XParseColor(xw.dpy, xw.cmap, colorname[mousefg], &xmousefg) == 0)
+	{
+		xmousefg.red = 0xffff;
 		xmousefg.green = 0xffff;
-		xmousefg.blue  = 0xffff;
+		xmousefg.blue = 0xffff;
 	}
 
-	if (XParseColor(xw.dpy, xw.cmap, colorname[mousebg], &xmousebg) == 0) {
-		xmousebg.red   = 0x0000;
+	if (XParseColor(xw.dpy, xw.cmap, colorname[mousebg], &xmousebg) == 0)
+	{
+		xmousebg.red = 0x0000;
 		xmousebg.green = 0x0000;
-		xmousebg.blue  = 0x0000;
+		xmousebg.blue = 0x0000;
 	}
 
 	XRecolorCursor(xw.dpy, cursor, &xmousefg, &xmousebg);
@@ -1225,7 +1283,7 @@ xinit(int cols, int rows)
 
 	xw.netwmpid = XInternAtom(xw.dpy, "_NET_WM_PID", False);
 	XChangeProperty(xw.dpy, xw.win, xw.netwmpid, XA_CARDINAL, 32,
-			PropModeReplace, (uchar *)&thispid, 1);
+					PropModeReplace, (uchar *)&thispid, 1);
 
 	win.mode = MODE_NUMLOCK;
 	resettitle();
@@ -1242,8 +1300,7 @@ xinit(int cols, int rows)
 		xsel.xtarget = XA_STRING;
 }
 
-int
-xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x, int y)
+int xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x, int y)
 {
 	float winx = borderpx + x * win.cw, winy = borderpx + y * win.ch, xp, yp;
 	ushort mode, prevmode = USHRT_MAX;
@@ -1254,11 +1311,12 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 	FT_UInt glyphidx;
 	FcResult fcres;
 	FcPattern *fcpattern, *fontpattern;
-	FcFontSet *fcsets[] = { NULL };
+	FcFontSet *fcsets[] = {NULL};
 	FcCharSet *fccharset;
 	int i, f, numspecs = 0;
 
-	for (i = 0, xp = winx, yp = winy + font->ascent; i < len; ++i) {
+	for (i = 0, xp = winx, yp = winy + font->ascent; i < len; ++i)
+	{
 		/* Fetch rune and mode for current glyph. */
 		rune = glyphs[i].u;
 		mode = glyphs[i].mode;
@@ -1268,18 +1326,24 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 			continue;
 
 		/* Determine font for glyph if different from previous glyph. */
-		if (prevmode != mode) {
+		if (prevmode != mode)
+		{
 			prevmode = mode;
 			font = &dc.font;
 			frcflags = FRC_NORMAL;
 			runewidth = win.cw * ((mode & ATTR_WIDE) ? 2.0f : 1.0f);
-			if ((mode & ATTR_ITALIC) && (mode & ATTR_BOLD)) {
+			if ((mode & ATTR_ITALIC) && (mode & ATTR_BOLD))
+			{
 				font = &dc.ibfont;
 				frcflags = FRC_ITALICBOLD;
-			} else if (mode & ATTR_ITALIC) {
+			}
+			else if (mode & ATTR_ITALIC)
+			{
 				font = &dc.ifont;
 				frcflags = FRC_ITALIC;
-			} else if (mode & ATTR_BOLD) {
+			}
+			else if (mode & ATTR_BOLD)
+			{
 				font = &dc.bfont;
 				frcflags = FRC_BOLD;
 			}
@@ -1288,7 +1352,8 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 
 		/* Lookup character index with default font. */
 		glyphidx = XftCharIndex(xw.dpy, font->match, rune);
-		if (glyphidx) {
+		if (glyphidx)
+		{
 			specs[numspecs].font = font->match;
 			specs[numspecs].glyph = glyphidx;
 			specs[numspecs].x = (short)xp;
@@ -1299,23 +1364,25 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		}
 
 		/* Fallback on font cache, search the font cache for match. */
-		for (f = 0; f < frclen; f++) {
+		for (f = 0; f < frclen; f++)
+		{
 			glyphidx = XftCharIndex(xw.dpy, frc[f].font, rune);
 			/* Everything correct. */
 			if (glyphidx && frc[f].flags == frcflags)
 				break;
 			/* We got a default font for a not found glyph. */
-			if (!glyphidx && frc[f].flags == frcflags
-					&& frc[f].unicodep == rune) {
+			if (!glyphidx && frc[f].flags == frcflags && frc[f].unicodep == rune)
+			{
 				break;
 			}
 		}
 
 		/* Nothing was found. Use fontconfig to find matching font. */
-		if (f >= frclen) {
+		if (f >= frclen)
+		{
 			if (!font->set)
 				font->set = FcFontSort(0, font->pattern,
-				                       1, 0, &fcres);
+									   1, 0, &fcres);
 			fcsets[0] = font->set;
 
 			/*
@@ -1330,24 +1397,25 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 
 			FcCharSetAddChar(fccharset, rune);
 			FcPatternAddCharSet(fcpattern, FC_CHARSET,
-					fccharset);
+								fccharset);
 			FcPatternAddBool(fcpattern, FC_SCALABLE, 1);
 
 			FcConfigSubstitute(0, fcpattern,
-					FcMatchPattern);
+							   FcMatchPattern);
 			FcDefaultSubstitute(fcpattern);
 
 			fontpattern = FcFontSetMatch(0, fcsets, 1,
-					fcpattern, &fcres);
+										 fcpattern, &fcres);
 
 			/* Allocate memory for the new cache entry. */
-			if (frclen >= frccap) {
+			if (frclen >= frccap)
+			{
 				frccap += 16;
 				frc = xrealloc(frc, frccap * sizeof(Fontcache));
 			}
 
 			frc[frclen].font = XftFontOpenPattern(xw.dpy,
-					fontpattern);
+												  fontpattern);
 			if (!frc[frclen].font)
 				die("XftFontOpenPattern failed seeking fallback font: %s\n",
 					strerror(errno));
@@ -1374,44 +1442,52 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 	return numspecs;
 }
 
-void
-xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, int y)
+void xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, int y)
 {
 	int charlen = len * ((base.mode & ATTR_WIDE) ? 2 : 1);
 	int winx = borderpx + x * win.cw, winy = borderpx + y * win.ch,
-	    width = charlen * win.cw;
+		width = charlen * win.cw;
 	Color *fg, *bg, *temp, revfg, revbg, truefg, truebg;
 	XRenderColor colfg, colbg;
 	XRectangle r;
 
 	/* Fallback on color display for attributes not supported by the font */
-	if (base.mode & ATTR_ITALIC && base.mode & ATTR_BOLD) {
+	if (base.mode & ATTR_ITALIC && base.mode & ATTR_BOLD)
+	{
 		if (dc.ibfont.badslant || dc.ibfont.badweight)
 			base.fg = defaultattr;
-	} else if ((base.mode & ATTR_ITALIC && dc.ifont.badslant) ||
-	    (base.mode & ATTR_BOLD && dc.bfont.badweight)) {
+	}
+	else if ((base.mode & ATTR_ITALIC && dc.ifont.badslant) ||
+			 (base.mode & ATTR_BOLD && dc.bfont.badweight))
+	{
 		base.fg = defaultattr;
 	}
 
-	if (IS_TRUECOL(base.fg)) {
+	if (IS_TRUECOL(base.fg))
+	{
 		colfg.alpha = 0xffff;
 		colfg.red = TRUERED(base.fg);
 		colfg.green = TRUEGREEN(base.fg);
 		colfg.blue = TRUEBLUE(base.fg);
 		XftColorAllocValue(xw.dpy, xw.vis, xw.cmap, &colfg, &truefg);
 		fg = &truefg;
-	} else {
+	}
+	else
+	{
 		fg = &dc.col[base.fg];
 	}
 
-	if (IS_TRUECOL(base.bg)) {
+	if (IS_TRUECOL(base.bg))
+	{
 		colbg.alpha = 0xffff;
 		colbg.green = TRUEGREEN(base.bg);
 		colbg.red = TRUERED(base.bg);
 		colbg.blue = TRUEBLUE(base.bg);
 		XftColorAllocValue(xw.dpy, xw.vis, xw.cmap, &colbg, &truebg);
 		bg = &truebg;
-	} else {
+	}
+	else
+	{
 		bg = &dc.col[base.bg];
 	}
 
@@ -1419,33 +1495,41 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 	if ((base.mode & ATTR_BOLD_FAINT) == ATTR_BOLD && BETWEEN(base.fg, 0, 7))
 		fg = &dc.col[base.fg + 8];
 
-	if (IS_SET(MODE_REVERSE)) {
-		if (fg == &dc.col[defaultfg]) {
+	if (IS_SET(MODE_REVERSE))
+	{
+		if (fg == &dc.col[defaultfg])
+		{
 			fg = &dc.col[defaultbg];
-		} else {
+		}
+		else
+		{
 			colfg.red = ~fg->color.red;
 			colfg.green = ~fg->color.green;
 			colfg.blue = ~fg->color.blue;
 			colfg.alpha = fg->color.alpha;
 			XftColorAllocValue(xw.dpy, xw.vis, xw.cmap, &colfg,
-					&revfg);
+							   &revfg);
 			fg = &revfg;
 		}
 
-		if (bg == &dc.col[defaultbg]) {
+		if (bg == &dc.col[defaultbg])
+		{
 			bg = &dc.col[defaultfg];
-		} else {
+		}
+		else
+		{
 			colbg.red = ~bg->color.red;
 			colbg.green = ~bg->color.green;
 			colbg.blue = ~bg->color.blue;
 			colbg.alpha = bg->color.alpha;
 			XftColorAllocValue(xw.dpy, xw.vis, xw.cmap, &colbg,
-					&revbg);
+							   &revbg);
 			bg = &revbg;
 		}
 	}
 
-	if ((base.mode & ATTR_BOLD_FAINT) == ATTR_FAINT) {
+	if ((base.mode & ATTR_BOLD_FAINT) == ATTR_FAINT)
+	{
 		colfg.red = fg->color.red / 2;
 		colfg.green = fg->color.green / 2;
 		colfg.blue = fg->color.blue / 2;
@@ -1454,7 +1538,8 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 		fg = &revfg;
 	}
 
-	if (base.mode & ATTR_REVERSE) {
+	if (base.mode & ATTR_REVERSE)
+	{
 		temp = fg;
 		fg = bg;
 		bg = temp;
@@ -1467,14 +1552,16 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 		fg = bg;
 
 	/* Intelligent cleaning up of the borders. */
-	if (x == 0) {
-		xclear(0, (y == 0)? 0 : winy, borderpx,
-			winy + win.ch +
-			((winy + win.ch >= borderpx + win.th)? win.h : 0));
+	if (x == 0)
+	{
+		xclear(0, (y == 0) ? 0 : winy, borderpx,
+			   winy + win.ch +
+				   ((winy + win.ch >= borderpx + win.th) ? win.h : 0));
 	}
-	if (winx + width >= borderpx + win.tw) {
-		xclear(winx + width, (y == 0)? 0 : winy, win.w,
-			((winy + win.ch >= borderpx + win.th)? win.h : (winy + win.ch)));
+	if (winx + width >= borderpx + win.tw)
+	{
+		xclear(winx + width, (y == 0) ? 0 : winy, win.w,
+			   ((winy + win.ch >= borderpx + win.th) ? win.h : (winy + win.ch)));
 	}
 	if (y == 0)
 		xclear(winx, 0, winx + width, borderpx);
@@ -1495,22 +1582,23 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 	XftDrawGlyphFontSpec(xw.draw, fg, specs, len);
 
 	/* Render underline and strikethrough. */
-	if (base.mode & ATTR_UNDERLINE) {
+	if (base.mode & ATTR_UNDERLINE)
+	{
 		XftDrawRect(xw.draw, fg, winx, winy + dc.font.ascent * chscale + 1,
-				width, 1);
+					width, 1);
 	}
 
-	if (base.mode & ATTR_STRUCK) {
+	if (base.mode & ATTR_STRUCK)
+	{
 		XftDrawRect(xw.draw, fg, winx, winy + 2 * dc.font.ascent * chscale / 3,
-				width, 1);
+					width, 1);
 	}
 
 	/* Reset clip to none. */
 	XftDrawSetClip(xw.draw, 0);
 }
 
-void
-xdrawglyph(Glyph g, int x, int y)
+void xdrawglyph(Glyph g, int x, int y)
 {
 	int numspecs;
 	XftGlyphFontSpec spec;
@@ -1519,8 +1607,7 @@ xdrawglyph(Glyph g, int x, int y)
 	xdrawglyphfontspecs(&spec, g, numspecs, x, y);
 }
 
-void
-xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
+void xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
 {
 	Color drawcol;
 
@@ -1535,23 +1622,32 @@ xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
 	/*
 	 * Select the right color for the right mode.
 	 */
-	g.mode &= ATTR_BOLD|ATTR_ITALIC|ATTR_UNDERLINE|ATTR_STRUCK|ATTR_WIDE;
+	g.mode &= ATTR_BOLD | ATTR_ITALIC | ATTR_UNDERLINE | ATTR_STRUCK | ATTR_WIDE;
 
-	if (IS_SET(MODE_REVERSE)) {
+	if (IS_SET(MODE_REVERSE))
+	{
 		g.mode |= ATTR_REVERSE;
 		g.bg = defaultfg;
-		if (selected(cx, cy)) {
+		if (selected(cx, cy))
+		{
 			drawcol = dc.col[defaultcs];
 			g.fg = defaultrcs;
-		} else {
+		}
+		else
+		{
 			drawcol = dc.col[defaultrcs];
 			g.fg = defaultcs;
 		}
-	} else {
-		if (selected(cx, cy)) {
+	}
+	else
+	{
+		if (selected(cx, cy))
+		{
 			g.fg = defaultfg;
 			g.bg = defaultrcs;
-		} else {
+		}
+		else
+		{
 			g.fg = defaultbg;
 			g.bg = defaultcs;
 		}
@@ -1559,54 +1655,57 @@ xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
 	}
 
 	/* draw the new one */
-	if (IS_SET(MODE_FOCUSED)) {
-		switch (win.cursor) {
-		case 7: /* st extension */
+	if (IS_SET(MODE_FOCUSED))
+	{
+		switch (win.cursor)
+		{
+		case 7:			  /* st extension */
 			g.u = 0x2603; /* snowman (U+2603) */
-			/* FALLTHROUGH */
-		case 0: /* Blinking Block */
-		case 1: /* Blinking Block (Default) */
-		case 2: /* Steady Block */
+						  /* FALLTHROUGH */
+		case 0:			  /* Blinking Block */
+		case 1:			  /* Blinking Block (Default) */
+		case 2:			  /* Steady Block */
 			xdrawglyph(g, cx, cy);
 			break;
 		case 3: /* Blinking Underline */
 		case 4: /* Steady Underline */
 			XftDrawRect(xw.draw, &drawcol,
-					borderpx + cx * win.cw,
-					borderpx + (cy + 1) * win.ch - \
-						cursorthickness,
-					win.cw, cursorthickness);
+						borderpx + cx * win.cw,
+						borderpx + (cy + 1) * win.ch -
+							cursorthickness,
+						win.cw, cursorthickness);
 			break;
 		case 5: /* Blinking bar */
 		case 6: /* Steady bar */
 			XftDrawRect(xw.draw, &drawcol,
-					borderpx + cx * win.cw,
-					borderpx + cy * win.ch,
-					cursorthickness, win.ch);
+						borderpx + cx * win.cw,
+						borderpx + cy * win.ch,
+						cursorthickness, win.ch);
 			break;
 		}
-	} else {
+	}
+	else
+	{
 		XftDrawRect(xw.draw, &drawcol,
-				borderpx + cx * win.cw,
-				borderpx + cy * win.ch,
-				win.cw - 1, 1);
+					borderpx + cx * win.cw,
+					borderpx + cy * win.ch,
+					win.cw - 1, 1);
 		XftDrawRect(xw.draw, &drawcol,
-				borderpx + cx * win.cw,
-				borderpx + cy * win.ch,
-				1, win.ch - 1);
+					borderpx + cx * win.cw,
+					borderpx + cy * win.ch,
+					1, win.ch - 1);
 		XftDrawRect(xw.draw, &drawcol,
-				borderpx + (cx + 1) * win.cw - 1,
-				borderpx + cy * win.ch,
-				1, win.ch - 1);
+					borderpx + (cx + 1) * win.cw - 1,
+					borderpx + cy * win.ch,
+					1, win.ch - 1);
 		XftDrawRect(xw.draw, &drawcol,
-				borderpx + cx * win.cw,
-				borderpx + (cy + 1) * win.ch - 1,
-				win.cw, 1);
+					borderpx + cx * win.cw,
+					borderpx + (cy + 1) * win.ch - 1,
+					win.cw, 1);
 	}
 }
 
-void
-xsetenv(void)
+void xsetenv(void)
 {
 	char buf[sizeof(long) * 8 + 1];
 
@@ -1614,8 +1713,7 @@ xsetenv(void)
 	setenv("WINDOWID", buf, 1);
 }
 
-void
-xseticontitle(char *p)
+void xseticontitle(char *p)
 {
 	XTextProperty prop;
 	DEFAULT(p, opt_title);
@@ -1624,15 +1722,14 @@ xseticontitle(char *p)
 		p = opt_title;
 
 	if (Xutf8TextListToTextProperty(xw.dpy, &p, 1, XUTF8StringStyle,
-	                                &prop) != Success)
+									&prop) != Success)
 		return;
 	XSetWMIconName(xw.dpy, xw.win, &prop);
 	XSetTextProperty(xw.dpy, xw.win, &prop, xw.netwmiconname);
 	XFree(prop.value);
 }
 
-void
-xsettitle(char *p)
+void xsettitle(char *p)
 {
 	XTextProperty prop;
 	DEFAULT(p, opt_title);
@@ -1641,21 +1738,19 @@ xsettitle(char *p)
 		p = opt_title;
 
 	if (Xutf8TextListToTextProperty(xw.dpy, &p, 1, XUTF8StringStyle,
-	                                &prop) != Success)
+									&prop) != Success)
 		return;
 	XSetWMName(xw.dpy, xw.win, &prop);
 	XSetTextProperty(xw.dpy, xw.win, &prop, xw.netwmname);
 	XFree(prop.value);
 }
 
-int
-xstartdraw(void)
+int xstartdraw(void)
 {
 	return IS_SET(MODE_VISIBLE);
 }
 
-void
-xdrawline(Line line, int x1, int y1, int x2)
+void xdrawline(Line line, int x1, int y1, int x2)
 {
 	int i, x, ox, numspecs;
 	Glyph base, new;
@@ -1663,19 +1758,22 @@ xdrawline(Line line, int x1, int y1, int x2)
 
 	numspecs = xmakeglyphfontspecs(specs, &line[x1], x2 - x1, x1, y1);
 	i = ox = 0;
-	for (x = x1; x < x2 && i < numspecs; x++) {
+	for (x = x1; x < x2 && i < numspecs; x++)
+	{
 		new = line[x];
 		if (new.mode == ATTR_WDUMMY)
 			continue;
 		if (selected(x, y1))
 			new.mode ^= ATTR_REVERSE;
-		if (i > 0 && ATTRCMP(base, new)) {
+		if (i > 0 && ATTRCMP(base, new))
+		{
 			xdrawglyphfontspecs(specs, base, i, ox, y1);
 			specs += i;
 			numspecs -= i;
 			i = 0;
 		}
-		if (i == 0) {
+		if (i == 0)
+		{
 			ox = x;
 			base = new;
 		}
@@ -1685,18 +1783,15 @@ xdrawline(Line line, int x1, int y1, int x2)
 		xdrawglyphfontspecs(specs, base, i, ox, y1);
 }
 
-void
-xfinishdraw(void)
+void xfinishdraw(void)
 {
 	XCopyArea(xw.dpy, xw.buf, xw.win, dc.gc, 0, 0, win.w,
-			win.h, 0, 0);
+			  win.h, 0, 0);
 	XSetForeground(xw.dpy, dc.gc,
-			dc.col[IS_SET(MODE_REVERSE)?
-				defaultfg : defaultbg].pixel);
+				   dc.col[IS_SET(MODE_REVERSE) ? defaultfg : defaultbg].pixel);
 }
 
-void
-xximspot(int x, int y)
+void xximspot(int x, int y)
 {
 	if (xw.ime.xic == NULL)
 		return;
@@ -1707,35 +1802,30 @@ xximspot(int x, int y)
 	XSetICValues(xw.ime.xic, XNPreeditAttributes, xw.ime.spotlist, NULL);
 }
 
-void
-expose(XEvent *ev)
+void expose(XEvent *ev)
 {
 	redraw();
 }
 
-void
-visibility(XEvent *ev)
+void visibility(XEvent *ev)
 {
 	XVisibilityEvent *e = &ev->xvisibility;
 
 	MODBIT(win.mode, e->state != VisibilityFullyObscured, MODE_VISIBLE);
 }
 
-void
-unmap(XEvent *ev)
+void unmap(XEvent *ev)
 {
 	win.mode &= ~MODE_VISIBLE;
 }
 
-void
-xsetpointermotion(int set)
+void xsetpointermotion(int set)
 {
 	MODBIT(xw.attrs.event_mask, set, PointerMotionMask);
 	XChangeWindowAttributes(xw.dpy, xw.win, CWEventMask, &xw.attrs);
 }
 
-void
-xsetmode(int set, unsigned int flags)
+void xsetmode(int set, unsigned int flags)
 {
 	int mode = win.mode;
 	MODBIT(win.mode, set, flags);
@@ -1743,8 +1833,7 @@ xsetmode(int set, unsigned int flags)
 		redraw();
 }
 
-int
-xsetcursor(int cursor)
+int xsetcursor(int cursor)
 {
 	if (!BETWEEN(cursor, 0, 7)) /* 7: st extension */
 		return 1;
@@ -1752,8 +1841,7 @@ xsetcursor(int cursor)
 	return 0;
 }
 
-void
-xseturgency(int add)
+void xseturgency(int add)
 {
 	XWMHints *h = XGetWMHints(xw.dpy, xw.win);
 
@@ -1762,8 +1850,7 @@ xseturgency(int add)
 	XFree(h);
 }
 
-void
-xbell(void)
+void xbell(void)
 {
 	if (!(IS_SET(MODE_FOCUSED)))
 		xseturgency(1);
@@ -1771,22 +1858,24 @@ xbell(void)
 		XkbBell(xw.dpy, xw.win, bellvolume, (Atom)NULL);
 }
 
-void
-focus(XEvent *ev)
+void focus(XEvent *ev)
 {
 	XFocusChangeEvent *e = &ev->xfocus;
 
 	if (e->mode == NotifyGrab)
 		return;
 
-	if (ev->type == FocusIn) {
+	if (ev->type == FocusIn)
+	{
 		if (xw.ime.xic)
 			XSetICFocus(xw.ime.xic);
 		win.mode |= MODE_FOCUSED;
 		xseturgency(0);
 		if (IS_SET(MODE_FOCUS))
 			ttywrite("\033[I", 3, 0);
-	} else {
+	}
+	else
+	{
 		if (xw.ime.xic)
 			XUnsetICFocus(xw.ime.xic);
 		win.mode &= ~MODE_FOCUSED;
@@ -1795,29 +1884,31 @@ focus(XEvent *ev)
 	}
 }
 
-int
-match(uint mask, uint state)
+int match(uint mask, uint state)
 {
 	return mask == XK_ANY_MOD || mask == (state & ~ignoremod);
 }
 
-char*
+char *
 kmap(KeySym k, uint state)
 {
 	Key *kp;
 	int i;
 
 	/* Check for mapped keys out of X11 function keys. */
-	for (i = 0; i < LEN(mappedkeys); i++) {
+	for (i = 0; i < LEN(mappedkeys); i++)
+	{
 		if (mappedkeys[i] == k)
 			break;
 	}
-	if (i == LEN(mappedkeys)) {
+	if (i == LEN(mappedkeys))
+	{
 		if ((k & 0xFFFF) < 0xFD00)
 			return NULL;
 	}
 
-	for (kp = key; kp < key + LEN(key); kp++) {
+	for (kp = key; kp < key + LEN(key); kp++)
+	{
 		if (kp->k != k)
 			continue;
 
@@ -1838,8 +1929,7 @@ kmap(KeySym k, uint state)
 	return NULL;
 }
 
-void
-kpress(XEvent *ev)
+void kpress(XEvent *ev)
 {
 	XKeyEvent *e = &ev->xkey;
 	KeySym ksym = NoSymbol;
@@ -1852,23 +1942,29 @@ kpress(XEvent *ev)
 	if (IS_SET(MODE_KBDLOCK))
 		return;
 
-	if (xw.ime.xic) {
+	if (xw.ime.xic)
+	{
 		len = XmbLookupString(xw.ime.xic, e, buf, sizeof buf, &ksym, &status);
 		if (status == XBufferOverflow)
 			return;
-	} else {
+	}
+	else
+	{
 		len = XLookupString(e, buf, sizeof buf, &ksym, NULL);
 	}
 	/* 1. shortcuts */
-	for (bp = shortcuts; bp < shortcuts + LEN(shortcuts); bp++) {
-		if (ksym == bp->keysym && match(bp->mod, e->state)) {
+	for (bp = shortcuts; bp < shortcuts + LEN(shortcuts); bp++)
+	{
+		if (ksym == bp->keysym && match(bp->mod, e->state))
+		{
 			bp->func(&(bp->arg));
 			return;
 		}
 	}
 
 	/* 2. custom keys from config.h */
-	if ((customkey = kmap(ksym, e->state))) {
+	if ((customkey = kmap(ksym, e->state)))
+	{
 		ttywrite(customkey, strlen(customkey), 1);
 		return;
 	}
@@ -1876,13 +1972,18 @@ kpress(XEvent *ev)
 	/* 3. composed string from input method */
 	if (len == 0)
 		return;
-	if (len == 1 && e->state & Mod1Mask) {
-		if (IS_SET(MODE_8BIT)) {
-			if (*buf < 0177) {
+	if (len == 1 && e->state & Mod1Mask)
+	{
+		if (IS_SET(MODE_8BIT))
+		{
+			if (*buf < 0177)
+			{
 				c = *buf | 0x80;
 				len = utf8encode(c, buf);
 			}
-		} else {
+		}
+		else
+		{
 			buf[1] = buf[0];
 			buf[0] = '\033';
 			len = 2;
@@ -1891,28 +1992,32 @@ kpress(XEvent *ev)
 	ttywrite(buf, len, 1);
 }
 
-void
-cmessage(XEvent *e)
+void cmessage(XEvent *e)
 {
 	/*
 	 * See xembed specs
 	 *  http://standards.freedesktop.org/xembed-spec/xembed-spec-latest.html
 	 */
-	if (e->xclient.message_type == xw.xembed && e->xclient.format == 32) {
-		if (e->xclient.data.l[1] == XEMBED_FOCUS_IN) {
+	if (e->xclient.message_type == xw.xembed && e->xclient.format == 32)
+	{
+		if (e->xclient.data.l[1] == XEMBED_FOCUS_IN)
+		{
 			win.mode |= MODE_FOCUSED;
 			xseturgency(0);
-		} else if (e->xclient.data.l[1] == XEMBED_FOCUS_OUT) {
+		}
+		else if (e->xclient.data.l[1] == XEMBED_FOCUS_OUT)
+		{
 			win.mode &= ~MODE_FOCUSED;
 		}
-	} else if (e->xclient.data.l[0] == xw.wmdeletewin) {
+	}
+	else if (e->xclient.data.l[0] == xw.wmdeletewin)
+	{
 		ttyhangup();
 		exit(0);
 	}
 }
 
-void
-resize(XEvent *e)
+void resize(XEvent *e)
 {
 	if (e->xconfigure.width == win.w && e->xconfigure.height == win.h)
 		return;
@@ -1920,8 +2025,7 @@ resize(XEvent *e)
 	cresize(e->xconfigure.width, e->xconfigure.height);
 }
 
-void
-run(void)
+void run(void)
 {
 	XEvent ev;
 	int w = win.w, h = win.h;
@@ -1931,7 +2035,8 @@ run(void)
 	double timeout;
 
 	/* Waiting for window mapping */
-	do {
+	do
+	{
 		XNextEvent(xw.dpy, &ev);
 		/*
 		 * This XFilterEvent call is required because of XOpenIM. It
@@ -1940,7 +2045,8 @@ run(void)
 		 */
 		if (XFilterEvent(&ev, None))
 			continue;
-		if (ev.type == ConfigureNotify) {
+		if (ev.type == ConfigureNotify)
+		{
 			w = ev.xconfigure.width;
 			h = ev.xconfigure.height;
 		}
@@ -1949,19 +2055,21 @@ run(void)
 	ttyfd = ttynew(opt_line, shell, opt_io, opt_cmd);
 	cresize(w, h);
 
-	for (timeout = -1, drawing = 0, lastblink = (struct timespec){0};;) {
+	for (timeout = -1, drawing = 0, lastblink = (struct timespec){0};;)
+	{
 		FD_ZERO(&rfd);
 		FD_SET(ttyfd, &rfd);
 		FD_SET(xfd, &rfd);
 
 		if (XPending(xw.dpy))
-			timeout = 0;  /* existing events might not set xfd */
+			timeout = 0; /* existing events might not set xfd */
 
 		seltv.tv_sec = timeout / 1E3;
 		seltv.tv_nsec = 1E6 * (timeout - 1E3 * seltv.tv_sec);
 		tv = timeout >= 0 ? &seltv : NULL;
 
-		if (pselect(MAX(xfd, ttyfd)+1, &rfd, NULL, NULL, tv, NULL) < 0) {
+		if (pselect(MAX(xfd, ttyfd) + 1, &rfd, NULL, NULL, tv, NULL) < 0)
+		{
 			if (errno == EINTR)
 				continue;
 			die("select failed: %s\n", strerror(errno));
@@ -1972,7 +2080,8 @@ run(void)
 			ttyread();
 
 		xev = 0;
-		while (XPending(xw.dpy)) {
+		while (XPending(xw.dpy))
+		{
 			xev = 1;
 			XNextEvent(xw.dpy, &ev);
 			if (XFilterEvent(&ev, None))
@@ -1992,22 +2101,25 @@ run(void)
 		 * maximum latency intervals during `cat huge.txt`, and perfect
 		 * sync with periodic updates from animations/key-repeats/etc.
 		 */
-		if (FD_ISSET(ttyfd, &rfd) || xev) {
-			if (!drawing) {
+		if (FD_ISSET(ttyfd, &rfd) || xev)
+		{
+			if (!drawing)
+			{
 				trigger = now;
 				drawing = 1;
 			}
-			timeout = (maxlatency - TIMEDIFF(now, trigger)) \
-			          / maxlatency * minlatency;
+			timeout = (maxlatency - TIMEDIFF(now, trigger)) / maxlatency * minlatency;
 			if (timeout > 0)
-				continue;  /* we have time, try to find idle */
+				continue; /* we have time, try to find idle */
 		}
 
 		/* idle detected or maxlatency exhausted -> draw */
 		timeout = -1;
-		if (blinktimeout && tattrset(ATTR_BLINK)) {
+		if (blinktimeout && tattrset(ATTR_BLINK))
+		{
 			timeout = blinktimeout - TIMEDIFF(now, lastblink);
-			if (timeout <= 0) {
+			if (timeout <= 0)
+			{
 				if (-timeout > blinktimeout) /* start visible */
 					win.mode |= MODE_BLINK;
 				win.mode ^= MODE_BLINK;
@@ -2023,30 +2135,33 @@ run(void)
 	}
 }
 
-void
-usage(void)
+void usage(void)
 {
 	die("usage: %s [-aiv] [-c class] [-f font] [-g geometry]"
-	    " [-n name] [-o file]\n"
-	    "          [-T title] [-t title] [-w windowid]"
-	    " [[-e] command [args ...]]\n"
-	    "       %s [-aiv] [-c class] [-f font] [-g geometry]"
-	    " [-n name] [-o file]\n"
-	    "          [-T title] [-t title] [-w windowid] -l line"
-	    " [stty_args ...]\n", argv0, argv0);
+		" [-n name] [-o file]\n"
+		"          [-T title] [-t title] [-w windowid]"
+		" [[-e] command [args ...]]\n"
+		"       %s [-aiv] [-c class] [-f font] [-g geometry]"
+		" [-n name] [-o file]\n"
+		"          [-T title] [-t title] [-w windowid] -l line"
+		" [stty_args ...]\n",
+		argv0, argv0);
 }
 
-int
-main(int argc, char *argv[])
+int main(int argc, char *argv[])
 {
 	xw.l = xw.t = 0;
 	xw.isfixed = False;
 	xsetcursor(cursorshape);
 
-	ARGBEGIN {
+	ARGBEGIN
+	{
 	case 'a':
 		allowaltscreen = 0;
 		break;
+	case 'A':
+		opt_alpha = EARGF(usage());
+		break;
 	case 'c':
 		opt_class = EARGF(usage());
 		break;
@@ -2059,7 +2174,7 @@ main(int argc, char *argv[])
 		break;
 	case 'g':
 		xw.gm = XParseGeometry(EARGF(usage()),
-				&xw.l, &xw.t, &cols, &rows);
+							   &xw.l, &xw.t, &cols, &rows);
 		break;
 	case 'i':
 		xw.isfixed = 1;
@@ -2085,7 +2200,8 @@ main(int argc, char *argv[])
 		break;
 	default:
 		usage();
-	} ARGEND;
+	}
+	ARGEND;
 
 run:
 	if (argc > 0) /* eat all remaining arguments */
-- 
2.44.1

